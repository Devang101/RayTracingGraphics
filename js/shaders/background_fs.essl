Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
precision highp float;
varying vec3 worldNormal;
varying vec3 worldPos;
varying vec3 rayDir;
uniform sampler2D colorTexture;
uniform sampler2D probeTexture;
uniform vec3 eyePosition;
uniform vec4 lightPos[1];
uniform vec4 lightPowerDensity[1];
uniform vec4 spotlightDir[1];
uniform mat4 quadrics[32];
uniform mat4 multiClipQuadrics[32];
uniform mat4 queens[32];
uniform vec4 brdfs[16];
uniform vec4 multiClipBrdfs[16];
uniform vec4 queensBrdfs[16];

const int QUEENS = 1;
const int QUAD_NUM = 4;
const int MULTI_CLIP_NUM = 3;
const int LIGHT_COUNT = 1;

float findMinPosT(float t1, float t2){
  if(t1>0.0 && t2<0.0){
    return t1;
  }
  else if(t2>0.0 && t1<0.0){
    return t2;
  }
  else{
    return min(t1,t2);
  }
}

float intersect2ClippedQuadric(mat4 A, mat4 B1, mat4 B2, vec4 e, vec4 d){
  float a = dot(d*A,d);
  float b = dot(d*A, e) + dot(e*A,d);
  float c = dot(e*A,e);
  float dis = b*b-4.0*a*c;

  if(dis<0.0){
    return -1.0;
  }

  float t1 = (-b + sqrt(dis))/(2.0*a);
  float t2 = (-b - sqrt(dis))/(2.0*a);

  vec4 h1 = e + d*t1;
  vec4 h2 = e + d*t2;

  float r1 = dot(h1*B1, h1);
  float r2 = dot(h2*B1, h2);
  float r3 = dot(h1*B2, h1);
  float r4 = dot(h2*B2, h2);

  if(r1> 0.0 || r3> 0.0){
    t1 = -1.0;
  }
  if(r2 >0.0 || r4 > 0.0) {
    t2 = -1.0;
  }
  return findMinPosT(t1,t2);
}

float intersectQueenClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d){
  float a = dot(d*A,d);
  float b = dot(d*A, e) + dot(e*A,d);
  float c = dot(e*A,e);
  float dis = b*b-4.0*a*c;

  if(dis<0.0){
    return -1.0;
  }

  float t1 = (-b + sqrt(dis))/(2.0*a);
  float t2 = (-b - sqrt(dis))/(2.0*a);

  vec4 h1 = e + d*t1;
  vec4 h2 = e + d*t2;

  float r1 = dot(h1*B, h1);
  float r2 = dot(h2*B, h2);
  float r3 = mod(floor((h2.y + h2.z) * 10.0),2.0);

  if(r1> 0.0){
    t1 = -1.0;
  }
  if(r2 >0.0) {
    t2 = -1.0;
  }
  if(r3 == 0.0){
    t2 = -1.0;
  }
  return findMinPosT(t1,t2);
}

float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d){
  float a = dot(d*A,d);
  float b = dot(d*A, e) + dot(e*A,d);
  float c = dot(e*A,e);
  float dis = b*b-4.0*a*c;

  if(dis<0.0){
    return -1.0;
  }

  float t1 = (-b + sqrt(dis))/(2.0*a);
  float t2 = (-b - sqrt(dis))/(2.0*a);

  vec4 h1 = e + d*t1;
  vec4 h2 = e + d*t2;

  float r1 = dot(h1*B, h1);
  float r2 = dot(h2*B, h2);

  if(r1> 0.0){
    t1 = -1.0;
  }
  if(r2 >0.0) {
    t2 = -1.0;
  }
  return findMinPosT(t1,t2);
}

bool findBestHit(vec4 e, vec4 d, out float bestT, out vec4 bestBrdf, out mat4 bestA) {
  bestT = -1.0;
  bestBrdf = vec4(1,1,1,0);
  bestA;
  for(int i = 0; i < QUAD_NUM; i++){
    float t = intersectClippedQuadric(quadrics[2*i], quadrics[2*i+1], e, d);
    if(t == findMinPosT(t, bestT)) {
      bestT = t;
      bestBrdf = brdfs[i];
      bestA = quadrics[2*i];
    }
  }
  for(int j = 0; j < MULTI_CLIP_NUM; j++){
    float t = intersect2ClippedQuadric(multiClipQuadrics[3*j], multiClipQuadrics[3*j+1], multiClipQuadrics[3*j+2], e, d);
    if(t == findMinPosT(t, bestT)) {
      bestT = t;
      bestBrdf = multiClipBrdfs[j];
      bestA = multiClipQuadrics[3*j];
    }
  }
  for(int k = 0; k < QUEENS; k++){
    float t = intersectQueenClippedQuadric(queens[2*k], queens[2*k+1], e, d);
    if(t == findMinPosT(t, bestT)) {
      bestT = t;
      bestBrdf = queensBrdfs[k];
      bestA = queens[2*k];
    }
  }
  return bestT >= 0.0;
}

vec3 getDiffuse(vec3 worldPos, vec3 worldNormal, vec4 brdf){
  vec3 color = vec3(0,0,0);
  vec3 kd = brdf.xyz;
  for(int i = 0; i < LIGHT_COUNT; i++) {
      vec3 lightDir = normalize(lightPos[i].xyz - worldPos * lightPos[i].w);
      float cosTheta = dot(normalize(worldNormal), lightDir);
          if(cosTheta < 0.0) return vec3(0,0,0);
           color += kd * lightPowerDensity[i].xyz * cosTheta;
  }
  return color;
}

vec3 getPB(vec3 worldPos, vec3 worldNormal, vec4 brdf){
  vec3 ks = brdf.xyz;
  float shininess = 5.0;
  vec3 normal = normalize(worldNormal);
  vec3 viewDir = normalize(eyePosition - worldPos);
  for(int i = 0; i < LIGHT_COUNT; i++) {
    vec3 lightDir = normalize(lightPos[i].xyz - worldPos * lightPos[i].w);
    float cosTheta = dot(normal,lightDir);
    if(cosTheta < 0.0) return vec3(0,0,0);
    vec3 halfway = normalize((viewDir + lightDir));
    float cosDelta = dot(normal,halfway);
    if(cosDelta < 0.0) return vec3(0,0,0);
    return lightPowerDensity[i].xyz * ks * pow(cosDelta, shininess);
    }
}

vec3 getColor(vec3 worldPos, vec3 worldNormal, vec4 brdf){
  return getDiffuse(worldPos,worldNormal,brdf) + getPB(worldPos,worldNormal,brdf);
}

float noise(vec3 r) {
  vec3 s = vec3(7502, 22777, 4767);
  float f = 0.0;
  for(int i =0; i<16; i++) {
    f += sin(dot(s-vec3(32768,32768,32768),r*40.0)/65536.0);
    s = mod(s,32768.0)*2.0+floor(s/32768.0);
  }
  return f / 32.0 + 0.5;
}

vec3 getWood(vec3 position){
  float scale = 16.0;
  float turbulence = 500.0;
  float period = 8.0;
  float sharpness = 10.0;
  float w = position.x * period + pow(noise(position*scale), sharpness) * turbulence;
  w -= floor(w + 10000.0) - 10000.0;
  return (vec3(1,0.3,0) * w + vec3(0.35, 0.1, 0.05) * (1.0-w));
}

vec3 getChecks(vec3 position) {
  float p = floor(position.x/1.5) + floor(position.z/1.5);
  if(mod(p,2.0) == 0.0) {
    return vec3(-1,-1,-1);
  }
  else{
    return vec3(0,0,0);
  }
}

vec3 noiseGrad(vec3 r) {
  vec3 s = vec3(7502, 22777, 4767);
  vec3 f = vec3(0.0, 0.0, 0.0);
  for(int i=0; i<16; i++) {
    f += cos( dot(s - vec3(32768, 32768, 32768), r*40.0)
                   / 65536.0) * (s - vec3(32768, 32768, 32768)) * 40.0;
    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
  }
  return f / 65536.0;
}


float getShadows(vec3 position, vec3 n){
  if(dot(rayDir,n)>0.0){
    n = -n;
  }
  position += n * 0.01;
  for(int i = 0; i<LIGHT_COUNT; i++){
    vec4 lightDir = vec4(normalize(lightPos[i].xyz - position * lightPos[i].w),0.0);
    float bestT;
    vec4 brdf;
    mat4 A;
    if(findBestHit(vec4(position,1.0), lightDir, bestT, brdf, A)) {
      return 0.0;
    }
    else{
      return 1.0;
    }
  }
}

void main(void) {
  vec4 e = vec4(eyePosition,1.0);
  vec4 d = normalize(vec4(normalize(rayDir),0.0));
  float bestT;
  vec4 brdf;
  mat4 A;
  if(findBestHit(e, d, bestT, brdf, A)) {
      vec4 r = e + d * bestT;
      vec3 n = normalize((A*r + r*A).xyz);
      if(brdf.w == 0.0){
        gl_FragColor = vec4((getColor(r.xyz, n, brdf)) * getShadows(r.xyz,n),1);
      }
      else if(brdf.w == 1.0){
        gl_FragColor = vec4((getWood(r.xyz) + getColor(r.xyz, n, brdf) + getChecks(r.xyz))*getShadows(r.xyz,n),1);
      }
      else if(brdf.w == 3.0){
        n += noiseGrad(r.xyz);
        gl_FragColor = vec4((getColor(r.xyz, n , brdf)) * getShadows(r.xyz,n),1);
      }
  }
  else{
    vec3 m = normalize(vec3(0.0,0.0,1.0) + d.xyz);
    vec2 probeTex = vec2(m.x/2.0 + 0.5, -m.y/2.0 +0.5);
    gl_FragColor = texture2D(probeTexture, probeTex);

  }
}
`;
